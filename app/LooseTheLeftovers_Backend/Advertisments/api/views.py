from rest_framework.response import Response 
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework import status
from rest_framework.decorators import api_view, permission_classes
from Advertisments.api.serializers import AdvertismentSerializer, ImageSerializer
from Advertisments.models import Advertisment

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def create_advertisment(request):
    '''
    POST request to handle creating new advertisment.

    Only logged in users can create ads so a valid JWT Access token must be included in the header. 
    After authentication both AdvertismentSerializer and ImageSerializer are initiated and used to 
    validate the fields passed in the POST request. If both are valid the ad and image will be saved.

    HTTP POST request requires these fields:
        - title
        - description (optional)
        - category
        - expiry datetime (optional)
            - expected format = 'yyyy-mm-ddThh:mm:ss:nnnnnnZ
        - image file

    Example JSON:

    json_data = {
        'title': 'Post Title',
        'description': 'Short description for post',
        'category': 'Vegan',
        'expiry': '2013-01-29T12:34:56.000000Z',
        'image': image_file
    }

    Returns:
        - If successful, returns a HTTP response 201 and validated data from serializer used to create ad
        - If unsuccessful
            returns HTTP 401 if user is not authenticated
            returns HTTP 405 if not a POST request
            returns HTTP 400 response with errors generated by the serializer if serializers could not validate
    '''

    # deserialize incoming data
    ad_serializer = AdvertismentSerializer(data=request.POST, context={'request': request})
    image_serializer = ImageSerializer(data=request.FILES)

    # validate data in request
    #   if either serializer is not valid return 400 response
    if not ad_serializer.is_valid():
        return Response(ad_serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    if not image_serializer.is_valid():
        return Response(image_serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    
    # save ad
    ad = ad_serializer.save()
    
    # create new instance of ImageSerializer to include the created ad as context
    #   have to call .is_valid() again in order to call .save()
    #   is_valid will always be True because it was already valided above
    image_serializer = ImageSerializer(data=request.FILES, context={'ad': ad})
    if image_serializer.is_valid(): 
        image_serializer.save()
    else:
       return Response(status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    # return 201 response indicating ad was created successfully
    return Response(ad_serializer.validated_data, status=status.HTTP_201_CREATED)

@api_view(['GET'])
@permission_classes([AllowAny])
def get_advertisment(request, *args, **kwargs):
    '''
    GET request to handle retrieving ads from the database. Retrieving ads does not require a logged in user
    so no token has to be provided.

    This method will return a single ad or multiple ads depending on the passed parameters:

    if ad_id is passed, only the single ad matching that primary key is returned
    if user_id is passed, all ads created by that user will be returned
    if neither ad_id or user_id as passed all ads in the database are returned
    '''
    
    # TODO: also get and return images for ads

    # if ad id was passed, return single ad
    ad_id = kwargs.get("ad_id", None)
    if ad_id is not None:
        try:
            # query ad
            ad = Advertisment.objects.get(pk=ad_id)
            # send to serializer to package data
            serializer = AdvertismentSerializer(ad)
            # send response, 200 ok
            return Response(serializer.data, status=status.HTTP_200_OK)
        except:
            # send problem response and server error
            response = {"message": "Error retrieving ad"}
            return Response(response, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    # if user id was passed, return all ads created by that user
    user_id = kwargs.get("user_id", None)
    if user_id is not None:
        try:
            # query ad
            user_ads = Advertisment.objects.filter(user_id=user_id)
            # send to serializer to package data
            serializer = AdvertismentSerializer(user_ads, many=True)
            # send response, 200 ok
            return Response(serializer.data, status=status.HTTP_200_OK)
        except:
            # send problem response and server error
            response = {"message": "Error retrieving user's ads"}
            return Response(response, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
    # if neither ad_id or user_id was passed return all ads
    #   TODO: add pagination to only return a certain number of ads at a time
    try:
        # query ad
        all_ads = Advertisment.objects.all()
        # send to serializer to package data
        serializer = AdvertismentSerializer(all_ads, many=True)
        # send response, 200 ok
        return Response(serializer.data, status=status.HTTP_200_OK)
    except:
        # send problem response and server error
        response = {"message": "Error retrieving all ads"}
        return Response(response, status=status.HTTP_500_INTERNAL_SERVER_ERROR)